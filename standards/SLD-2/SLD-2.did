type TokenId = nat;

type Subaccount = blob;

type Account = record {
    owner: principal;
    subaccount: opt Subaccount;
};

type ApproveArgs = record {
    from_subaccount: opt Subaccount;
    spender: principal;
    token_id: TokenId;
    approved: bool;
    memo : opt blob;
    created_at_time : opt nat64;
};

type ApproveError = variant {
    NotFound;
    NotOwner;
    MaxApprovals : nat;
    TemporarilyUnavailable;
    GenericError : record {
        error_code : nat;
        message : text
    };
};

type TransferFromArgs = record {
    from : Account;
    to : Account;
    token_id: TokenId;
    memo : opt blob;
    created_at_time : opt nat64;
};

type TransferFromError = variant {
    NotFound;
    NotOwner;
    NotApproved;
    TemporarilyUnavailable;
    GenericError : record {
        error_code : nat;
        message : text
    };
};

service : {
    sld2_approve: (ApproveArgs) -> (variant {
        Ok: nat;
        Err: ApproveError
    });
    sld2_transfer_from: (TransferFromArgs) -> (variant {
        Ok: nat;
        Err: TransferFromError
    });
    sld2_get_approved: (TokenId) -> (vec principal) query;
}
