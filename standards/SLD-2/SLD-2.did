type TokenId = nat;

type Subaccount = blob;

type Account = record {
    owner: principal;
    subaccount: opt Subaccount;
};

type SetApprovalArgs = record {
    from_subaccount: opt Subaccount;
    spender: principal;
    token_id: TokenId;
    approved: bool;
    memo: opt blob;
    created_at_time: opt nat64;
};

type SetApprovalError = variant {
    NotFound;
    NotOwner;
    MaxApprovals: nat;
    TemporarilyUnavailable;
    GenericError: record {
        error_code: nat;
        message: text
    };
};

type SetApprovalForAllArgs = record {
    from_subaccount: opt Subaccount;
    operator: principal;
    approved: bool;
    memo: opt blob;
    created_at_time: opt nat64;
};

type SetApprovalForAllError = variant {
    MaxApprovals: nat;
    TemporarilyUnavailable;
    GenericError: record {
        error_code: nat;
        message: text
    };
};

type TransferFromArgs = record {
    from: Account;
    to: Account;
    token_id: TokenId;
    memo: opt blob;
    created_at_time: opt nat64;
};

type TransferFromError = variant {
    NotFound;
    NotOwner;
    NotApproved;
    TemporarilyUnavailable;
    GenericError: record {
        error_code: nat;
        message: text
    };
};

service : {
    sld2_set_approval: (SetApprovalArgs) -> (variant {
        Ok: nat;
        Err: SetApprovalError
    });
    sld2_get_approved: (TokenId) -> (vec principal) query;
    sld2_set_approval_for_all: (SetApprovalForAllArgs) -> (variant {
        Ok: nat;
        Err: SetApprovalForAllError
    });
    sld2_get_approved_for_all: (Account) -> (vec principal) query;
    sld2_transfer_from: (TransferFromArgs) -> (variant {
        Ok: nat;
        Err: TransferFromError
    });
}
