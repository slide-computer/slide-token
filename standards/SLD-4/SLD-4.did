type TokenId = nat;

type Subaccount = blob;

type Account = record {
    owner: principal;
    subaccount: opt Subaccount;
};

type Value = variant {
    Nat: nat;
    Int: int;
    Text: text;
    Blob: blob;
};

type MintArgs = record {
    to: Account;
    token_id: TokenId;
    metadata: vec record {
        text;
        Value
    };
    memo: opt blob;
    created_at_time: opt nat64;
};

type MintError = variant {
    NotAllowed;
    TemporarilyUnavailable;
    GenericError: record {
        error_code: nat;
        message: text
    };
};

service : {
    sld4_mint: (MintArgs) -> (variant {
        Ok: nat;
        Err: MintError
    });
}
