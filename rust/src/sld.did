type TokenId = nat;

type Subaccount = blob;

type Account = record {
    owner: principal;
    subaccount: opt Subaccount;
};

type TransferArgs = record {
    from_subaccount: opt Subaccount;
    to: Account;
    token_id: TokenId;
    memo: opt blob;
    created_at_time: opt nat64;
};

type TransferError = variant {
    NotFound;
    NotOwner;
    TemporarilyUnavailable;
    GenericError: record {
        error_code: nat;
        message: text
    };
};

type Value = variant {
    Nat: nat;
    Int: int;
    Text: text;
    Blob: blob;
};

type SetApprovalArgs = record {
    from_subaccount: opt Subaccount;
    spender: principal;
    token_id: TokenId;
    approved: bool;
    memo: opt blob;
    created_at_time: opt nat64;
};

type SetApprovalError = variant {
    NotFound;
    NotOwner;
    MaxApprovals: nat;
    TemporarilyUnavailable;
    GenericError: record {
        error_code: nat;
        message: text
    };
};

type SetApprovalForAllArgs = record {
    from_subaccount: opt Subaccount;
    spender: principal;
    approved: bool;
    memo: opt blob;
    created_at_time: opt nat64;
};

type SetApprovalForAllError = variant {
    MaxApprovals: nat;
    TemporarilyUnavailable;
    GenericError: record {
        error_code: nat;
        message: text
    };
};

type TransferFromArgs = record {
    from: Account;
    to: Account;
    token_id: TokenId;
    memo: opt blob;
    created_at_time: opt nat64;
};

type TransferFromError = variant {
    NotFound;
    NotOwner;
    NotApproved;
    TemporarilyUnavailable;
    GenericError: record {
        error_code: nat;
        message: text
    };
};

type MintArgs = record {
    to: Account;
    token_id: TokenId;
    metadata: vec record {
        text;
        Value
    };
    memo: opt blob;
    created_at_time: opt nat64;
};

type MintError = variant {
    NotAllowed;
    TemporarilyUnavailable;
    GenericError: record {
        error_code: nat;
        message: text
    };
};

type BurnArgs = record {
    token_id: TokenId;
    memo: opt blob;
    created_at_time: opt nat64;
};

type BurnError = variant {
    NotAllowed;
    TemporarilyUnavailable;
    GenericError: record {
        error_code: nat;
        message: text
    };
};

type SetCustodianArgs = record {
    custodian: principal;
    approved: bool;
};

type SetCustodiansError = variant {
    NotAllowed;
    MaxCustodians: nat;
    TemporarilyUnavailable;
    GenericError: record {
        error_code: nat;
        message: text
    };
};

type RoyaltyFee = record {
    account: Account;
    fee: nat;
};

type SetRoyaltyFeeArgs = record {
    account: Account;
    fee: float64;
};

type SetRoyaltyFeeError = variant {
    NotAllowed;
    TemporarilyUnavailable;
    GenericError: record {
        error_code: nat;
        message: text
    };
};

service : {
    sld1_metadata: () -> (vec record {
        text;
        Value
    }) query;
    sld1_name: () -> (text) query;
    sld1_symbol: () -> (text) query;
    sld1_total_supply: () -> (nat) query;
    sld1_minting_account: () -> (Account) query;
    sld1_balance_of: (Account) -> (nat) query;
    sld1_owner_of: (TokenId) -> (opt Account) query;
    sld1_tokens: (nat) -> (vec TokenId) query;
    sld1_tokens_of: (Account, nat) -> (vec TokenId) query;
    sld1_metadata_of: (TokenId) -> (opt vec record {
        text;
        Value
    }) query;
    sld1_transfer: (TransferArgs) -> (variant {
        Ok: nat;
        Err: TransferError
    });
    sld1_supported_standards: () -> (vec record {
        name: text;
        url: text
    });
    sld2_set_approval: (SetApprovalArgs) -> (variant {
        Ok: nat;
        Err: SetApprovalError
    });
    sld2_get_approved: (TokenId) -> (vec principal) query;
    sld2_set_approval_for_all: (SetApprovalForAllArgs) -> (variant {
        Ok: nat;
        Err: SetApprovalForAllError
    });
    sld2_transfer_from: (TransferFromArgs) -> (variant {
        Ok: nat;
        Err: TransferFromError
    });
    sld4_mint: (MintArgs) -> (variant {
        Ok: nat;
        Err: MintError
    });
    sld5_burn: (BurnArgs) -> (variant {
        Ok: nat;
        Err: BurnError
    });
    sld6_get_custodians: () -> (vec principal) query;
    sld6_set_custodian: (SetCustodianArgs) -> (variant {
        Ok: nat;
        Err: SetCustodiansError
    });
    sld7_royalty_fee: (nat) -> (RoyaltyFee) query;
    sld8_set_royalty_fee: (SetRoyaltyFeeArgs) -> (variant {
        Ok: nat;
        Err: SetRoyaltyFeeError
    });
}
